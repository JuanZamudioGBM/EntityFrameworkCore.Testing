<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFrameworkCore.Testing.NSubstitute</name>
    </assembly>
    <members>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions">
            <summary>Extensions for the db context type.</summary>
            <summary>Extensions for the db context type.</summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.CreateSubstituteDbContext``1(``0)">
            <summary>Creates and sets up a substitute db context.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="dbContextToMock">The db context to mock/proxy.</param>
            <returns>A substitute db context.</returns>
            <remarks>dbContextToMock would typically be an in-memory database instance.</remarks>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.CreateAndAttachSubstituteDbSetTo``2(``0,``0)">
            <summary>Creates and attaches a substitute db set to a substitute db context.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="substituteDbContext">The substitute db context.</param>
            <param name="dbContextToMock">The db context to mock/proxy.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.CreateAndAttachSubstituteDbQueryTo``2(``0,``0)">
            <summary>Creates and attaches a substitute db query to a substitute db context.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="substituteDbContext">The substitute db context.</param>
            <param name="dbContextToMock">The db context to mock/proxy.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.AddExecuteSqlCommandResult``1(``0,System.Int32,System.Action)">
            <summary>Sets up ExecuteSqlCommand invocations to return a specified result.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="substituteDbContext">The substitute db context.</param>
            <param name="executeSqlCommandResult">The integer to return when ExecuteSqlCommand is invoked.</param>
            <param name="callback">Operations to perform after ExecuteSqlCommand is invoked.</param>
            <returns>The substitute db context.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.AddExecuteSqlCommandResult``1(``0,System.String,System.Int32,System.Action)">
            <summary>Sets up ExecuteSqlCommand invocations containing a specified sql string to return a specified result.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="substituteDbContext">The substitute db context.</param>
            <param name="sql">The ExecuteSqlCommand sql string. Set up supports case insensitive partial matches.</param>
            <param name="executeSqlCommandResult">The integer to return when ExecuteSqlCommand is invoked.</param>
            <param name="callback">Operations to perform after ExecuteSqlCommand is invoked.</param>
            <returns>The substitute db context.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.AddExecuteSqlCommandResult``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Action)">
            <summary>Sets up ExecuteSqlCommand invocations containing a specified sql string and parameters to return a specified result.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="substituteDbContext">The substitute db context.</param>
            <param name="sql">The ExecuteSqlCommand sql string. Set up supports case insensitive partial matches.</param>
            <param name="parameters">The ExecuteSqlCommand parameters. Set up supports case insensitive partial parameter sequence matching.</param>
            <param name="executeSqlCommandResult">The integer to return when ExecuteSqlCommand is invoked.</param>
            <param name="callback">Operations to perform after ExecuteSqlCommand is invoked.</param>
            <returns>The substitute db context.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.CreateMock``1(``0)">
            <summary>Creates and sets up a substitute db context.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="dbContextToMock">The db context to mock/proxy.</param>
            <returns>A substitute db context.</returns>
            <remarks>dbContextToMock would typically be an in-memory database instance.</remarks>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions">
            <summary>Extensions for the db query type.</summary>
            <summary>Extensions for the db query type.</summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.CreateSubstituteDbQuery``1(Microsoft.EntityFrameworkCore.DbQuery{``0})">
            <summary>Creates and sets up a substitute db query.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="dbQuery">The db query to mock.</param>
            <returns>A substitute db query.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.AddToReadOnlySource``1(Microsoft.EntityFrameworkCore.DbQuery{``0},``0)">
            <summary>Adds an item to the end of the substitute db query source.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="substituteDbQuery">The substitute db query.</param>
            <param name="item">The item to be added to the end of the substitute db query source.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.AddRangeToReadOnlySource``1(Microsoft.EntityFrameworkCore.DbQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds the items of the specified sequence to the end of the substitute db query source.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="substituteDbQuery">The substitute db query.</param>
            <param name="items">The sequence whose items should be added to the end of the substitute db query source.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.ClearReadOnlySource``1(Microsoft.EntityFrameworkCore.DbQuery{``0})">
            <summary>Removes all items from the substitute db query source.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="substituteDbQuery">The substitute db query.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.CreateMock``1(Microsoft.EntityFrameworkCore.DbQuery{``0})">
            <summary>Creates and sets up a substitute db query.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="dbQuery">The db query to mock.</param>
            <returns>A substitute db query.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.Add``1(Microsoft.EntityFrameworkCore.DbQuery{``0},``0)">
            <summary>Adds an item to the end of the substitute db query source.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="substituteDbQuery">The substitute db query.</param>
            <param name="item">The item to be added to the end of the substitute db query source.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.AddRange``1(Microsoft.EntityFrameworkCore.DbQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds the items of the specified sequence to the end of the substitute db query source.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="substituteDbQuery">The substitute db query.</param>
            <param name="items">The sequence whose items should be added to the end of the substitute db query source.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.Clear``1(Microsoft.EntityFrameworkCore.DbQuery{``0})">
            <summary>Removes all items from the substitute db query source.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="substituteDbQuery">The substitute db query.</param>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbSetExtensions">
            <summary>Extensions for the db set type.</summary>
            <summary>Extensions for the db set type.</summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbSetExtensions.CreateSubstituteDbSet``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>Creates and sets up a substitute db set.</summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="dbSet">The db set to mock/proxy.</param>
            <returns>A substitute db set.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbSetExtensions.CreateMock``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>Creates and sets up a substitute db set.</summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="dbSet">The db set to mock/proxy.</param>
            <returns>A substitute db set.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryableExtensions">
            <summary>Extensions for queryable types.</summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryableExtensions.AddFromSqlResult``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Sets up FromSql invocations to return a specified result.</summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="substituteQueryable">The substitute queryable.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The substitute queryable.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryableExtensions.AddFromSqlResult``1(System.Linq.IQueryable{``0},System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Sets up FromSql invocations containing a specified sql string to return a specified result.</summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="substituteQueryable">The substitute queryable.</param>
            <param name="sql">The FromSql sql string. Set up supports case insensitive partial matches.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The substitute queryable.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryableExtensions.AddFromSqlResult``1(System.Linq.IQueryable{``0},System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{``0})">
            <summary>Sets up FromSql invocations containing a specified sql string and parameters to return a specified result.</summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="substituteQueryable">The substitute queryable.</param>
            <param name="sql">The FromSql sql string. Set up supports case insensitive partial matches.</param>
            <param name="parameters">The FromSql parameters. Set up supports case insensitive partial parameter sequence matching.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The substitute queryable.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions">
            <summary>Extensions for query provider and mock query provider types.</summary>
            <summary>Extensions for query provider and mock query provider types.</summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions.CreateSubstituteQueryProvider``1(System.Linq.IQueryProvider,System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a substitute query provider.</summary>
            <typeparam name="T">The query provider source item type.</typeparam>
            <param name="queryProviderToMock">The query provider to mock.</param>
            <param name="enumerable">The query provider source.</param>
            <returns>A substitute query provider.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions.AddFromSqlResult``1(System.Linq.IQueryProvider,System.Collections.Generic.IEnumerable{``0})">
            <summary>Sets up FromSql invocations to return a specified result.</summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="substituteQueryProvider">The substitute query provider.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The substitute queryable.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions.AddFromSqlResult``1(System.Linq.IQueryProvider,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Sets up FromSql invocations containing a specified sql string to return a specified result.</summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="substituteQueryProvider">The substitute query provider.</param>
            <param name="sql">The FromSql sql string. Set up supports case insensitive partial matches.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The substitute queryable.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions.AddFromSqlResult``1(System.Linq.IQueryProvider,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{``0})">
            <summary>Sets up FromSql invocations containing a specified sql string and parameters to return a specified result.</summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="substituteQueryProvider">The substitute query provider.</param>
            <param name="sql">The FromSql sql string. Set up supports case insensitive partial matches.</param>
            <param name="parameters">The FromSql parameters. Set up supports case insensitive partial parameter sequence matching.</param>
            <param name="fromSqlResult">The sequence to return when FromSql is invoked.</param>
            <returns>The substitute query provider.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions.CreateMock``1(System.Linq.IQueryProvider,System.Collections.Generic.IEnumerable{``0})">
            <summary>Creates a substitute query provider.</summary>
            <typeparam name="T">The query provider source item type.</typeparam>
            <param name="queryProviderToMock">The query provider to mock.</param>
            <param name="enumerable">The query provider source.</param>
            <returns>A substitute query provider.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create">
            <summary>Factory for creating substitute instances.</summary>
            <summary>Factory for creating substitute instances.</summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteDbContextFor``1(``0)">
            <summary>Creates a substitute db context.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="dbContextToMock">The db context to mock.</param>
            <returns>A substitute db context.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteDbContextFor``1">
            <summary>Creates a substitute db context.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <returns>A substitute db context.</returns>
            <remarks>TDbContext must have a constructor with a single parameter of type DbContextOptionsBuilder.</remarks>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteDbContextFor``1(System.Func{``0})">
            <summary>Creates a substitute db context.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="factory">A factory method that will create an instance of TDbContext.</param>
            <returns>A substitute db context.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteDbSetFor``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>Creates a substitute db set.</summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="dbSetToMock">The db set to mock.</param>
            <returns>A substitute db set.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteDbQueryFor``1(Microsoft.EntityFrameworkCore.DbQuery{``0})">
            <summary>Creates a substitute db query.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="dbQueryToMock">The db query to mock.</param>
            <returns>A substitute db query.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteQueryProviderFor``1(System.Linq.IQueryable{``0})">
            <summary>
                Creates a substitute query provider.
            </summary>
            <typeparam name="T">The queryable type.</typeparam>
            <param name="queryable">The query provider source.</param>
            <returns>A substitute query provider.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteFor``1(``0)">
            <summary>Creates a substitute db context.</summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="dbContextToMock">The db context to mock.</param>
            <returns>A substitute db context.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteFor``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>Creates a substitute db set.</summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="dbSetToMock">The db set to mock.</param>
            <returns>A substitute db set.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteFor``1(Microsoft.EntityFrameworkCore.DbQuery{``0})">
            <summary>Creates a substitute db query.</summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="dbQueryToMock">The db query to mock.</param>
            <returns>A substitute db query.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.Create.SubstituteFor``1(System.Linq.IQueryable{``0})">
            <summary>
                Creates a substitute query provider.
            </summary>
            <typeparam name="T">The queryable type.</typeparam>
            <param name="queryable">The query provider source.</param>
            <returns>A substitute query provider.</returns>
        </member>
    </members>
</doc>
